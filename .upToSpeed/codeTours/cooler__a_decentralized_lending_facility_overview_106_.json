{"title":"Cooler: A Decentralized Lending Facility Overview","id":"4BCr63nj+nF4/2DvvRbTVc8SqkRWrI4e8SMenlGe+O4=","position":1,"steps":[{"type":"textOnly","description":"The **Cooler** lending facility is a decentralized application built on Ethereum, allowing users to secure fixed-term loans using `gOHM` as collateral. The system consists of three main smart contracts: `Cooler`, `CoolerFactory`, and `Clearinghouse`. These components work together in the lending process.","title":"","id":"518"},{"type":"highlight","description":"The **`Cooler`** contract manages individual loans. The **`Request`** struct defines the terms of a loan request, including the loan amount, interest rate, loan-to-collateral ratio, duration, and an active flag.","file":"Cooler/src/Cooler.sol","highlight":[{"start":33,"end":39}],"title":"","id":"519"},{"type":"highlight","description":"The `requestLoan` function allows borrowers to create a new **loan request**. It takes the loan terms as parameters and returns a request ID. This function is used to initiate the lending process.","file":"Cooler/src/Cooler.sol","highlight":[{"start":98,"end":103}],"title":"","id":"520"},{"type":"highlight","description":"The `repayLoan` function handles loan repayments. It checks if the loan has expired before processing the repayment. This check on **line 154** is a critical security feature to prevent repayments on defaulted loans.","file":"Cooler/src/Cooler.sol","highlight":[{"start":151,"end":154}],"title":"","id":"521"},{"type":"highlight","description":"The **`CoolerFactory`** contract manages the creation of **`Cooler`** contracts. The **`generateCooler`** function creates a new **`Cooler`** contract or returns an existing one for the given collateral and debt tokens. This design ensures that each unique collateral-debt pair has only one **`Cooler`** contract.","file":"Cooler/src/CoolerFactory.sol","highlight":[{"start":58,"end":60}],"title":"","id":"522"},{"type":"highlight","description":"The **Clearinghouse** contract acts as the central management system for the lending facility. The `lendToCooler` function allows the **Clearinghouse** to lend to a Cooler contract. It includes important security checks, such as **verifying the Cooler's origin** on line 133.","file":"Cooler/src/Clearinghouse.sol","highlight":[{"start":129,"end":133}],"title":"","id":"523"},{"type":"highlight","description":"The `claimDefaulted` function handles the claiming of defaulted loans. It includes a check to ensure the input arrays have matching lengths on line 193, which is **an important security consideration** to prevent potential attacks or errors.","file":"Cooler/src/Clearinghouse.sol","highlight":[{"start":191,"end":193}],"title":"","id":"524"},{"type":"highlight","description":"Access control is implemented using the **`onlyRole`** modifier. This modifier restricts function access to specific roles, ensuring that only authorized addresses can execute certain operations. For example, in the **`Clearinghouse`** contract, the **`setTreasury`** function uses the **`onlyRole(TREASURER)`** modifier (line 312), limiting this critical operation to addresses with the **TREASURER** role.","file":"Cooler/src/Clearinghouse.sol","highlight":[{"start":312,"end":314}],"title":"","id":"527"}]}